
server:
  port: 8081
spring:
  profiles:
    active: query_route #程序的spring的启动文件


#在application.yml再建一个配置文件，语法是三个横线，在此配置文件中通过spring.profiles来配置文件名，和spring.profiles.active一致
#然后配置spring cloud gateway 相关的配置，id标签配置的是router的id，
#每个router都需要一个唯一的id，uri配置的是将请求路由到哪里，本案例全部路由到http://httpbin.org:80/get。

#After Route Predicate Factory
#这个After就是指定了它的Gateway web handler类为AfterRoutePredicateFactory
#启动工程，在浏览器上访问http://localhost:8081/，会显示http://httpbin.org:80/get返回的结果，此时gateway路由到了配置的uri。
#如果我们将配置的时间设置到当前时之后，浏览器会显示404，此时证明没有路由到配置的uri.
#Before Route Predicate Factory、Between Route Predicate Factory 同理
---
spring:
  cloud:
    gateway:
      routes:
      - id: after_route
        uri: http://httpbin.org:80/get
        predicates:
        - After=2020-01-20T17:42:47.789-07:00[America/Denver]
  profiles: after_route


#Header Route Predicate Factory需要2个参数，一个是header名，另外一个header值，该值可以是一个正则表达式。
#当此断言匹配了请求的header名和值时，断言通过，进入到router的规则中去。
#在上面的配置中，当请求的Header中有X-Request-Id的header名，且header值为数字时，请求会被路由到配置的 uri. 使用curl执行以下命令:
#curl -H X-Request-Id:1 localhost:8081
---
spring:
  cloud:
    gateway:
      routes:
      - id: header_route
        uri: http://httpbin.org:80/get
        predicates:
        - Header=X-Request-Id, \d+
  profiles: header_route


#Cookie Route Predicate Factory需要2个参数，一个时cookie名字，另一个时值，可以为正则表达式。
#它用于匹配请求中，带有该名称的cookie和cookie匹配正则表达式的请求。
#name, cookie值为forezp 的请求将都会转发到uri为 http://httpbin.org:80/get的地址上。
#curl -H Cookie:name=forezp localhost:8081
---
spring:
  cloud:
    gateway:
      routes:
      - id: cookie_route
        uri: http://httpbin.org:80/get
        predicates:
        - Cookie=name, forezp
  profiles: cookie_route


#Host Route Predicate Factory需要一个参数即hostname，它可以使用.*等去匹配host。这个参数会匹配请求头中的host的值，一致，则请求正确转发。
#curl -H Host:www.fangzhipeng.com localhost:8081
---
spring:
  cloud:
    gateway:
      routes:
      - id: host_route
        uri: http://httpbin.org:80/get
        predicates:
        - Host=**.fangzhipeng.com
  profiles: host_route

#Method Route Predicate Factory 需要一个参数，即请求的类型。比如GET类型的请求都转发到此路由。
#curl localhost:8081
#curl -X POST localhost:8081
---
spring:
  cloud:
    gateway:
      routes:
      - id: method_route
        uri: http://httpbin.org:80/get
        predicates:
        - Method=GET
  profiles: method_route


#Path Route Predicate Factory 需要一个参数: 一个spel表达式，应用匹配路径。
#在下面的配置中，所有的请求路径满足/foo/{segment}的请求将会匹配并被路由，比如/foo/1 、/foo/bar的请求，将会命中匹配，并成功转发。
#curl localhost:8081/foo/dew
---
spring:
  cloud:
    gateway:
      routes:
      - id: path_route
        uri: http://httpbin.org:80/get
        predicates:
        - Path=/foo/{segment}
  profiles: path_route



#Query Route Predicate Factory 需要2个参数:一个参数名和一个参数值的正则表达式。
#在下面的配置文件中，配置了请求中含有参数foo，并且foo的值匹配ba.，
#则请求命中路由，比如一个请求中含有参数名为foo，值的为bar，能够被正确路由转发。
#curl localhost:8081?foo=bar

#Query Route Predicate Factory也可以只填一个参数，填一个参数时，则只匹配参数名，即请求的参数中含有配置的参数名，则命中路由。
---
spring:
  cloud:
    gateway:
      routes:
      - id: query_route
        uri: http://httpbin.org:80/get
        predicates:
#        - Query=foo, ba.
        - Query=foo
  profiles: query_route